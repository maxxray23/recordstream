#!/usr/bin/perl

$| = 1;

use strict;
use warnings;

use Getopt::Long;
use Recs::InputStream;
use Recs::OutputStream;
use Recs::Record;

my $default_depth = 1;
my %depth;
my $separator = "-";

Getopt::Long::Configure("pass_through");
GetOptions(
   (map { ($_ . "=s") => \&add_fields } (1..9)),
   "depth=i"     => \$default_depth,
   "field=s"     => sub { add_fields($default_depth, $_[1]); },
   "deep=s"      => sub { add_fields(-1, $_[1]); },
   "separator=s" => \$separator,
   "help"        => \&usage,
);

sub add_fields
{
   my ($depth, $fields) = @_;

   for my $field (split(/,/, $fields))
   {
      $depth{$field} = $depth;
   }
}

my $in = Recs::InputStream->new_magic();
my $out = Recs::OutputStream->new();
my $r;
while($r = $in->get_record())
{
   for my $field (%depth)
   {
      if(!exists($depth{$field}))
      {
         next;
      }
      my $value = $r->remove($field);
      split_field($r, $field, $depth{$field}, $value);
   }
   $out->put_record($r);
}

sub split_field
{
   my ($r, $name, $depth, $value) = @_;

   if($depth != 0 && ref($value) eq "ARRAY")
   {
      for(my $i = 0; $i < @$value; ++$i)
      {
         split_field($r, $name . $separator . $i, $depth - 1, $value->[$i]);
      }
      return;
   }

   if($depth != 0 && ref($value) eq "HASH")
   {
      for my $key (keys(%$value))
      {
         split_field($r, $name . $separator . $key, $depth - 1, $value->{$key});
      }
      return;
   }

   # either depth is 0 or it wasn't expandable anyway

   $r->set($name, $value);
}

sub usage
{
   my ($message) = @_;
   if(defined($message))
   {
      print $message . "\n";
   }
   while(my $l = <DATA>)
   {
      print $l;
   }
   exit 1;
}

__DATA__
Usage: recs-flatten <args> [<files>]
   Flatten nested structues in records.

Arguments:
   -<n> <fields>          For this comma-separated list of fields split to
                          depth n (1-9).
   --depth <nbr>          Change the default depth, negative being arbitrary
                          depth (defaults to 1).
   --field <fields>       For this comma-separated list of fields split to the
                          default depth.
   --deep <fields>        For this comma-separated list of fields split to
                          arbitrary depth.
   --separator <string>   Use this string to separate joined field names
                          (defaults to "-").
   --help                 Bail and output this help screen.

Examples:
   Under
      recs-flatten -1 field
   We see
      {"field" => "value"} becomes {"field" => "value"}
      {"field" => {"subfield" => "value"}} becomes {"field-subfield" => "value"}
      {"field" => ["value1", "value2"]} becomes {"field-0" => "value1", "field-1" => "value2"}
      {"field" => {"subfield" => [0, 1]}} becomes {"field-subfield" => [0, 1]}}
   Under
      recs-flatten --deep x
   We see
      {"x" => {"y" => [{"z" = "v"}]}} becomes {"x-y-0-z" => "v"}
