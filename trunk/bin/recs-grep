#!/usr/bin/perl

$| = 1;

use strict;
use warnings;

use Getopt::Long;
use Recs::InputStream;
use Recs::OutputStream;
use Recs::Record;

Getopt::Long::Configure("pass_through");
GetOptions(
   "help" => \&usage,
);

usage('Must specify expression to evaluate') unless(@ARGV);

my $__MY__expr = shift;

my $__MY__in = Recs::InputStream->new_magic();
my $__MY__out = Recs::OutputStream->new();
my $line = 0;
my $r;
while($r = $__MY__in->get_record())
{
   ++$line;
   my $__MY__v;
   {
      no strict;
      no warnings;
      $__MY__v = eval $__MY__expr;
   }
   if($@)
   {
      chomp $@;
      warn "Code threw: " . $@ . "\n";
   }
   elsif($__MY__v)
   {
      $__MY__out->put_record($r);
   }
}

sub usage
{
   my ($message) = @_;
   if(defined($message))
   {
      print $message . "\n";
   }
   while(my $l = <DATA>)
   {
      print $l;
   }
   exit 1;
}

__DATA__
Usage: recs-grep <args> <expr> [<files>]
   <expr> is evaluated as perl on each record of input (or records from
   <files>) with $r set to a Recs::Record object and $line set to the current
   line number (starting at 1).  Records for which the evaluation is a perl
   true are printed back out.

Arguments:
   --help   Bail and output this help screen.

Examples:
   Filter to records with field 'name' equal to 'John'
      recs-grep '$r->{name} eq "John"'
