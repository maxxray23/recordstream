#!/usr/bin/perl

$| = 1;

use strict;
use warnings;

use Getopt::Long;
use Recs::InputStream;
use Recs::OutputStream;
use Recs::Record;

my @keys;
my $reverse = 0;

Getopt::Long::Configure("pass_through");
GetOptions(
   "key|k=s"   => sub { push @keys, split(/,/, $_[1]); },
   "reverse|r" => \$reverse,
   'help'      => \&usage,
);

usage('Must specify keys to sort on') unless ( scalar @keys > 0 );

my $in = Recs::InputStream->new_magic();
my @r;
my $r;
while($r = $in->get_record())
{
   push @r, $r;
}

my $out = Recs::OutputStream->new();

@r = Recs::Record::sort(\@r, @keys);
if($reverse)
{
   @r = reverse @r;
}

foreach my $r (@r)
{
   $out->put_record($r);
}


sub usage
{
   my ($message) = @_;
   if(defined($message))
   {
      print $message . "\n";
   }
   while(my $l = <DATA>)
   {
      print $l;
   }
   exit 1;
}

__DATA__
Usage: recs-sort <args> [<files>]
   Sorts records from input or from <files>.  You may sort on a list of keys,
   each key sorted lexically (alpha order) or numerically

   --key <keyspec> - May be comma separated, May be specified multiple times.
                     Each keyspec is a name or a name=sortType.  The name
                     should be a field name to sort on.  The sort type should
                     be either lexical or numeric.  Default sort type is
                     lexical (can also use nat, lex, n, and l).  Additionallly,
                     the name may be prefixed with '-' to indicate a decreasing
                     sort order.  (See perldoc for Recs::Record for more on
                     sort specs).
    --reverse      - Reverses the sort order
    --help         - Bail and output this help screen.

Examples:
   Sort on the id field, a numeric
      recs-sort --key id=numeric
   Sort on age, then name
      recs-sort --key age=numeric,name
   Sort on decreasing size, name
      recs-sort --key -size=numeric --key name
